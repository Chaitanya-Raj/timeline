{"version":3,"sources":["Components/User.js","Components/Repo.js","App.js","serviceWorker.js","index.js"],"names":["User","user","className","href","url","src","avatarUrl","alt","login","repositories","totalCount","Repo","repos","days","months","map","repo","date","Date","formatted_date","getDay","getDate","getMonth","getFullYear","key","link","category","tag","style","background","color","text","target","rel","App","useState","setLogin","setUser","setRepos","onSubmit","e","a","preventDefault","graphql","query","first","headers","authorization","process","repositoryOwner","nodes","r","description","createdAt","split","primaryLanguage","name","reverse","type","id","value","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAmBeA,G,MAjBF,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACd,OACE,yBAAKC,UAAU,aACb,uBAAGC,KAAMF,EAAKG,KACZ,yBAAKC,IAAKJ,EAAKK,UAAWC,IAAI,WAC9B,4BAAKN,EAAKO,QAEZ,uBAAGL,KAAI,UAAKF,EAAKG,IAAV,kBACL,kDACqB,6BAClBH,EAAKQ,aAAaC,gBCsDdC,EAhEF,SAAC,GAAe,IAAbC,EAAY,EAAZA,MACRC,EAAO,CACX,SACA,SACA,UACA,YACA,WACA,SACA,YAGIC,EAAS,CACb,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,OAGF,OACE,yBAAKZ,UAAU,sBACZU,EAAMG,KAAI,SAACC,GACV,IAAMC,EAAO,IAAIC,KAAKF,EAAKC,MACvBE,EAAc,UAAMN,EAAKI,EAAKG,UAAhB,aAA8BH,EAAKI,UAAnC,YAChBP,EAAOG,EAAKK,YADI,YAEdL,EAAKM,eACT,OACE,yBAAKrB,UAAU,gBAAgBsB,IAAKR,EAAKS,KAAKrB,KAC5C,yBAAKF,UAAU,yBACZc,EAAKU,SAASC,KACb,0BACEzB,UAAU,MACV0B,MAAO,CAAEC,WAAYb,EAAKU,SAASI,QAElCd,EAAKU,SAASC,KAGnB,8BAAOR,GACP,2BAAIH,EAAKe,MACRf,EAAKS,MACJ,uBACEtB,KAAMa,EAAKS,KAAKrB,IAChB4B,OAAO,SACPC,IAAI,uBAEHjB,EAAKS,KAAKM,MAGf,0BAAM7B,UAAU,kBCgCfgC,EAjFH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACT3B,EADS,KACF4B,EADE,OAEQD,mBAAS,MAFjB,mBAETlC,EAFS,KAEHoC,EAFG,OAGUF,mBAAS,MAHnB,mBAGTvB,EAHS,KAGF0B,EAHE,KAMVC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACfD,EAAEE,iBADa,SAEmBC,YAAQ,CACxCC,MAAM,ogBAsBNpC,QACAqC,MA5BU,IA6BVC,QAAS,CACPC,cAAc,SAAD,OApCOC,+CAQT,gBAEPC,EAFO,EAEPA,gBA6BRZ,EAAQY,GACRX,EACEW,EAAgBxC,aAAayC,MAC1BnC,KAAI,SAACoC,GACJ,MAAO,CACLpB,KAAMoB,EAAEC,YACRnC,KAAMkC,EAAEE,UAAUC,MAAM,KAAK,GAC7B5B,SAAU,CACRC,IAAKwB,EAAEI,gBAAkBJ,EAAEI,gBAAgBC,KAAO,KAClD1B,MAAOqB,EAAEI,gBAAkBJ,EAAEI,gBAAgBzB,MAAQ,MAEvDL,KAAM,CACJrB,IAAK+C,EAAE/C,IACP2B,KAAMoB,EAAEK,UAIbC,WAhDU,2CAAH,sDAoDd,OACE,yBAAKvD,UAAU,aACb,0BAAMqC,SAAUA,GACd,2BACEA,SAAUA,EACVmB,KAAK,OACLF,KAAK,OACLG,GAAG,OACHC,MAAOpD,EACPqD,SAAU,SAACrB,GAAD,OAAOJ,EAASI,EAAER,OAAO4B,QACnCE,YAAY,+BAGf7D,GAAQW,GACP,yBAAKV,UAAU,UACb,kBAAC,EAAD,CAAMD,KAAMA,IACZ,kBAAC,EAAD,CAAMW,MAAOA,OCtEHmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.76360074.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst User = ({ user }) => {\r\n  return (\r\n    <div className=\"user-info\">\r\n      <a href={user.url}>\r\n        <img src={user.avatarUrl} alt=\"Avatar\" />\r\n        <h1>{user.login}</h1>\r\n      </a>\r\n      <a href={`${user.url}/repositories`}>\r\n        <h1>\r\n          Total Repositories <br />\r\n          {user.repositories.totalCount}\r\n        </h1>\r\n      </a>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React from \"react\";\r\n\r\nconst Repo = ({ repos }) => {\r\n  const days = [\r\n    \"Sunday\",\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n  ];\r\n\r\n  const months = [\r\n    \"Jan\",\r\n    \"Feb\",\r\n    \"Mar\",\r\n    \"Apr\",\r\n    \"May\",\r\n    \"Jun\",\r\n    \"Jul\",\r\n    \"Aug\",\r\n    \"Sep\",\r\n    \"Oct\",\r\n    \"Nov\",\r\n    \"Dec\",\r\n  ];\r\n\r\n  return (\r\n    <div className=\"timeline-container\">\r\n      {repos.map((repo) => {\r\n        const date = new Date(repo.date);\r\n        let formatted_date = `${days[date.getDay()]}, ${date.getDate()} ${\r\n          months[date.getMonth()]\r\n        } ${date.getFullYear()}`;\r\n        return (\r\n          <div className=\"timeline-item\" key={repo.link.url}>\r\n            <div className=\"timeline-item-content\">\r\n              {repo.category.tag && (\r\n                <span\r\n                  className=\"tag\"\r\n                  style={{ background: repo.category.color }}\r\n                >\r\n                  {repo.category.tag}\r\n                </span>\r\n              )}\r\n              <time>{formatted_date}</time>\r\n              <p>{repo.text}</p>\r\n              {repo.link && (\r\n                <a\r\n                  href={repo.link.url}\r\n                  target=\"_blank\"\r\n                  rel=\"noopener noreferrer\"\r\n                >\r\n                  {repo.link.text}\r\n                </a>\r\n              )}\r\n              <span className=\"circle\" />\r\n            </div>\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Repo;\r\n","import React, { useState } from \"react\";\r\nimport { graphql } from \"@octokit/graphql\";\r\nimport \"./App.css\";\r\nimport User from \"./Components/User\";\r\nimport Repo from \"./Components/Repo\";\r\n\r\nconst { REACT_APP_TOKEN } = process.env;\r\n\r\nconst App = () => {\r\n  const [login, setLogin] = useState(\"\");\r\n  const [user, setUser] = useState(null);\r\n  const [repos, setRepos] = useState(null);\r\n  const first = 100;\r\n\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n    const { repositoryOwner } = await graphql({\r\n      query: `\r\n        query User($login: String!, $first: Int!) {\r\n          repositoryOwner(login: $login) {\r\n            login\r\n            avatarUrl\r\n            url\r\n            repositories(first: $first) {\r\n              totalCount\r\n              nodes {\r\n                name\r\n                description\r\n                primaryLanguage{\r\n                  name\r\n                  color\r\n                }\r\n                createdAt\r\n                url\r\n              }\r\n            }\r\n          }\r\n        }\r\n      `,\r\n      login,\r\n      first,\r\n      headers: {\r\n        authorization: `token ${REACT_APP_TOKEN}`,\r\n      },\r\n    });\r\n    setUser(repositoryOwner);\r\n    setRepos(\r\n      repositoryOwner.repositories.nodes\r\n        .map((r) => {\r\n          return {\r\n            text: r.description,\r\n            date: r.createdAt.split(\"T\")[0],\r\n            category: {\r\n              tag: r.primaryLanguage ? r.primaryLanguage.name : null,\r\n              color: r.primaryLanguage ? r.primaryLanguage.color : null,\r\n            },\r\n            link: {\r\n              url: r.url,\r\n              text: r.name,\r\n            },\r\n          };\r\n        })\r\n        .reverse()\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          onSubmit={onSubmit}\r\n          type=\"text\"\r\n          name=\"user\"\r\n          id=\"user\"\r\n          value={login}\r\n          onChange={(e) => setLogin(e.target.value)}\r\n          placeholder=\"Type a github username...\"\r\n        />\r\n      </form>\r\n      {user && repos && (\r\n        <div className=\"result\">\r\n          <User user={user} />\r\n          <Repo repos={repos} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}