{"version":3,"sources":["github_logo.png","Components/User.js","Components/Repo.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","User","user","className","href","url","src","avatarUrl","alt","login","repositories","totalCount","Repo","repos","days","months","map","repo","date","Date","formatted_date","getDay","getDate","getMonth","getFullYear","key","link","category","tag","style","background","color","isFork","text","target","rel","App","useState","token","setToken","username","setUsername","setUser","setRepos","useEffect","code","window","location","match","console","log","fetch","then","response","json","onSubmit","e","a","preventDefault","graphql","query","first","headers","authorization","repositoryOwner","nodes","r","description","createdAt","split","primaryLanguage","name","reverse","toast","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","logo","type","id","value","onChange","placeholder","autoFocus","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6dd71cfb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/github_logo.6bd3bcb8.png\";","import React from \"react\";\n\nconst User = ({ user }) => {\n  return (\n    <div className=\"user-info\">\n      <a href={user.url}>\n        <img src={user.avatarUrl} alt=\"Avatar\" />\n        <h1>{user.login}</h1>\n      </a>\n      <a href={`${user.url}/repositories`}>\n        <h1>\n          Total Repositories <br />\n          {user.repositories.totalCount}\n        </h1>\n      </a>\n    </div>\n  );\n};\n\nexport default User;\n","import React from \"react\";\n\nconst Repo = ({ repos }) => {\n  const days = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  const months = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  return (\n    <div className=\"timeline-container\">\n      {repos.map((repo) => {\n        const date = new Date(repo.date);\n        let formatted_date = `${days[date.getDay()]}, ${date.getDate()} ${\n          months[date.getMonth()]\n        } ${date.getFullYear()}`;\n        return (\n          <div className=\"timeline-item\" key={repo.link.url}>\n            <div className=\"timeline-item-content\">\n              {repo.category.tag && (\n                <span\n                  className=\"tag\"\n                  style={{ background: repo.category.color }}\n                >\n                  {repo.category.tag}\n                </span>\n              )}\n              <time>{formatted_date}</time>\n              <p>\n                {repo.isFork && (\n                  <i>\n                    <b>(Forked) </b>\n                  </i>\n                )}\n                {repo.text}\n              </p>\n              {repo.link && (\n                <a\n                  href={repo.link.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  {repo.link.text}\n                </a>\n              )}\n              <span className=\"circle\" />\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Repo;\n","import React, { useEffect, useState } from \"react\";\nimport { graphql } from \"@octokit/graphql\";\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport \"./App.css\";\nimport User from \"./Components/User\";\nimport Repo from \"./Components/Repo\";\nimport logo from \"./github_logo.png\";\n\nconst CLIENT_ID = \"f989a2362def54e6d959\";\nconst REDIRECT_URI = \"https://chaitanya-raj.github.io/timeline/\";\n\nconst App = () => {\n  const [token, setToken] = useState(null);\n  const [username, setUsername] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [repos, setRepos] = useState(null);\n  const first = 100;\n\n  useEffect(() => {\n    const code =\n      window.location.href.match(/\\?code=(.*)/) &&\n      window.location.href.match(/\\?code=(.*)/)[1];\n    console.log(code);\n    if (code) {\n      fetch(`https://timeline-github.herokuapp.com/authenticate/${code}`)\n        .then((response) => response.json())\n        .then(({ token }) => {\n          console.log(token);\n          setToken(token);\n        });\n    }\n  }, []);\n\n  const notify = () =>\n    toast(\"User does not exist\", {\n      position: \"top-right\",\n      autoClose: 3000,\n      hideProgressBar: true,\n      closeOnClick: true,\n      pauseOnHover: true,\n      draggable: true,\n      progress: undefined,\n    });\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    try {\n      const { repositoryOwner } = await graphql({\n        query: `\n        query User($username: String!, $first: Int!) {\n          repositoryOwner(login: $username) {\n            login\n            avatarUrl\n            url\n            repositories(first: $first) {\n              totalCount\n              nodes {\n                name\n                description\n                primaryLanguage{\n                  name\n                  color\n                }\n                isFork\n                createdAt\n                url\n              }\n            }\n          }\n        }\n      `,\n        username,\n        first,\n        headers: {\n          authorization: `token ${token}`,\n        },\n      });\n      setUser(repositoryOwner);\n      setRepos(\n        repositoryOwner.repositories.nodes\n          .map((r) => {\n            return {\n              text: r.description,\n              date: r.createdAt.split(\"T\")[0],\n              category: {\n                tag: r.primaryLanguage ? r.primaryLanguage.name : null,\n                color: r.primaryLanguage ? r.primaryLanguage.color : null,\n              },\n              isFork: r.isFork,\n              link: {\n                url: r.url,\n                text: r.name,\n              },\n            };\n          })\n          .reverse()\n      );\n    } catch (error) {\n      notify();\n    }\n  };\n\n  console.log(\"token : \", token);\n\n  return (\n    <>\n      <ToastContainer />\n\n      {!token && (\n        <div className=\"login\">\n          <img src={logo} alt=\"GitHub\" />\n          <a\n            href={`https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user&redirect_uri=${REDIRECT_URI}`}\n          >\n            <button>login</button>\n          </a>\n        </div>\n      )}\n\n      {token && (\n        <div className=\"container\">\n          <form onSubmit={onSubmit}>\n            <input\n              onSubmit={onSubmit}\n              type=\"text\"\n              name=\"user\"\n              id=\"user\"\n              value={username}\n              onChange={(e) => setUsername(e.target.value)}\n              placeholder=\"Type a github username...\"\n              autoFocus\n            />\n          </form>\n          {user && repos && (\n            <div className=\"result\">\n              <User user={user} />\n              <Repo repos={repos} />\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}