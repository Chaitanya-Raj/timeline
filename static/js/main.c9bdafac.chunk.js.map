{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","login","setLogin","user","setUser","repos","setRepos","onSubmit","e","a","preventDefault","graphql","query","first","headers","authorization","repositoryOwner","console","log","repositories","nodes","map","r","text","description","date","createdAt","split","category","tag","primaryLanguage","name","color","link","url","reverse","setTimeout","document","querySelector","scrollIntoView","className","type","id","value","onChange","target","src","avatarUrl","alt","href","totalCount","repo","key","style","background","rel","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+OA8HeA,G,MA1HH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEQF,mBAAS,MAFjB,mBAETG,EAFS,KAEHC,EAFG,OAGUJ,mBAAS,MAHnB,mBAGTK,EAHS,KAGFC,EAHE,KAMVC,EAAQ,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,6DACfD,EAAEE,iBADa,SAEmBC,YAAQ,CACxCC,MAAM,ogBAsBNX,QACAY,MA5BU,IA6BVC,QAAS,CACPC,cAAc,oDA5BH,gBAEPC,EAFO,EAEPA,gBA6BRC,QAAQC,IAAIF,GACZZ,EAAQY,GACRV,EACEU,EAAgBG,aAAaC,MAC1BC,KAAI,SAACC,GACJ,MAAO,CACLC,KAAMD,EAAEE,YACRC,KAAMH,EAAEI,UAAUC,MAAM,KAAK,GAC7BC,SAAU,CACRC,IAAKP,EAAEQ,gBAAkBR,EAAEQ,gBAAgBC,KAAO,KAClDC,MAAOV,EAAEQ,gBAAkBR,EAAEQ,gBAAgBE,MAAQ,MAEvDC,KAAM,CACJC,IAAKZ,EAAEY,IACPX,KAAMD,EAAES,UAIbI,WAELC,YAAW,WACTC,SAASC,cAAc,WAAWC,mBACjC,MArDY,2CAAH,sDAwDd,OACE,yBAAKC,UAAU,aACb,0BAAMjC,SAAUA,GACd,2BACEA,SAAUA,EACVkC,KAAK,OACLV,KAAK,OACLW,GAAG,OACHC,MAAO1C,EACP2C,SAAU,SAACpC,GAAD,OAAON,EAASM,EAAEqC,OAAOF,WAGtCxC,GAAQE,GACP,yBAAKmC,UAAU,UACb,yBAAKA,UAAU,aACb,yBAAKM,IAAK3C,EAAK4C,UAAWC,IAAI,WAC9B,4BACE,uBAAGC,KAAM9C,EAAK+B,KAAM/B,EAAKF,QAE3B,kDACqB,6BAClBE,EAAKgB,aAAa+B,aAGvB,yBAAKV,UAAU,sBACZnC,EAAMgB,KAAI,SAAC8B,GACV,OACE,yBAAKX,UAAU,gBAAgBY,IAAKD,EAAKlB,KAAKC,KAC5C,yBAAKM,UAAU,yBACZW,EAAKvB,SAASC,KACb,0BACEW,UAAU,MACVa,MAAO,CAAEC,WAAYH,EAAKvB,SAASI,QAElCmB,EAAKvB,SAASC,KAGnB,8BAAOsB,EAAK1B,MACZ,2BAAI0B,EAAK5B,MACR4B,EAAKlB,MACJ,uBACEgB,KAAME,EAAKlB,KAAKC,IAChBW,OAAO,SACPU,IAAI,uBAEHJ,EAAKlB,KAAKV,MAGf,0BAAMiB,UAAU,qBCtGhBgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASzB,SAAS0B,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.c9bdafac.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { graphql } from \"@octokit/graphql\";\nimport \"./App.css\";\n\nconst App = () => {\n  const [login, setLogin] = useState(\"\");\n  const [user, setUser] = useState(null);\n  const [repos, setRepos] = useState(null);\n  const first = 100;\n\n  const onSubmit = async (e) => {\n    e.preventDefault();\n    const { repositoryOwner } = await graphql({\n      query: `\n        query User($login: String!, $first: Int!) {\n          repositoryOwner(login: $login) {\n            login\n            avatarUrl\n            url\n            repositories(first: $first) {\n              totalCount\n              nodes {\n                name\n                description\n                primaryLanguage{\n                  name\n                  color\n                }\n                createdAt\n                url\n              }\n            }\n          }\n        }\n      `,\n      login,\n      first,\n      headers: {\n        authorization: `token 1e707e8a4fde638ace80907e2661fc9608756e40`,\n      },\n    });\n    console.log(repositoryOwner);\n    setUser(repositoryOwner);\n    setRepos(\n      repositoryOwner.repositories.nodes\n        .map((r) => {\n          return {\n            text: r.description,\n            date: r.createdAt.split(\"T\")[0],\n            category: {\n              tag: r.primaryLanguage ? r.primaryLanguage.name : null,\n              color: r.primaryLanguage ? r.primaryLanguage.color : null,\n            },\n            link: {\n              url: r.url,\n              text: r.name,\n            },\n          };\n        })\n        .reverse()\n    );\n    setTimeout(() => {\n      document.querySelector(\".result\").scrollIntoView();\n    }, 1500);\n  };\n\n  return (\n    <div className=\"container\">\n      <form onSubmit={onSubmit}>\n        <input\n          onSubmit={onSubmit}\n          type=\"text\"\n          name=\"user\"\n          id=\"user\"\n          value={login}\n          onChange={(e) => setLogin(e.target.value)}\n        />\n      </form>\n      {user && repos && (\n        <div className=\"result\">\n          <div className=\"user-info\">\n            <img src={user.avatarUrl} alt=\"Avatar\" />\n            <h1>\n              <a href={user.url}>{user.login}</a>\n            </h1>\n            <h1>\n              Total Repositories <br />\n              {user.repositories.totalCount}\n            </h1>\n          </div>\n          <div className=\"timeline-container\">\n            {repos.map((repo) => {\n              return (\n                <div className=\"timeline-item\" key={repo.link.url}>\n                  <div className=\"timeline-item-content\">\n                    {repo.category.tag && (\n                      <span\n                        className=\"tag\"\n                        style={{ background: repo.category.color }}\n                      >\n                        {repo.category.tag}\n                      </span>\n                    )}\n                    <time>{repo.date}</time>\n                    <p>{repo.text}</p>\n                    {repo.link && (\n                      <a\n                        href={repo.link.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {repo.link.text}\n                      </a>\n                    )}\n                    <span className=\"circle\" />\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}